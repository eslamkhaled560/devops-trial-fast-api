name: CI/CD - FastAPI ECS

on:
  push:
    branches:
      - main
  workflow_dispatch: # manual trigger from GitHub Actions tab

env:
  AWS_REGION: us-east-1
  ECR_REPO_NAME: devops-trial-fastapi-app
  TF_DIR: terraform
  TF_VERSION: 1.8.0

jobs:
  deploy:
    name: Build & Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure AWS credentials from GitHub secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}


      # Ensure Terraform backend (S3 + DynamoDB) exists
      - name: Bootstrap Terraform backend (create S3 + DynamoDB if missing)
        working-directory: ${{ env.TF_DIR }}
        run: |
          echo "Checking if Terraform backend exists..."
          if ! aws s3api head-bucket --bucket devops-trial-tf-backend-state; then
            echo "Backend not found. Creating S3 and DynamoDB for Terraform state..."
            terraform init
            terraform apply -target=aws_s3_bucket.tf_state \
                            -target=aws_s3_bucket_versioning.tf_state_versioning \
                            -target=aws_dynamodb_table.tf_lock \
                            -auto-approve
          else
            echo "Terraform backend already exists ‚Äî skipping bootstrap."
          fi

      # Terraform Init
      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false

      # Create ECR repository only if it doesn't exist
      - name: Terraform Apply (create only ECR if missing)
        working-directory: ${{ env.TF_DIR }}
        env:
          ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }} # This variable will receive the ECR repo name from Terraform Variables
        run: |
          echo "Checking if ECR repository '${ECR_REPO_NAME}' exists..."
          if aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region "$AWS_REGION" >/dev/null 2>&1; then
            echo "ECR repository '${ECR_REPO_NAME}' already exists. Skipping Terraform apply for ECR."
          else
            echo "ECR repository '${ECR_REPO_NAME}' not found. Creating with Terraform..."
            terraform apply -target=aws_ecr_repository.app -auto-approve
          fi

      # Get ECR repository URI from Terraform output
      - name: Get ECR repository URI
        id: get-ecr-uri
        working-directory: ${{ env.TF_DIR }}
        run: |
          ECR_URI=$(terraform output -raw ecr_repository_url)
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
          echo "ECR_URI=$ECR_URI"

      # Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build & push Docker image to ECR tagged with Github SHA
      - name: Build and push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd app
          echo "Building Docker image..."
          docker build -t $ECR_URI:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_URI:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_URI:$IMAGE_TAG" >> $GITHUB_ENV

      # Apply full Terraform infrastructure
      - name: Terraform Apply (full deployment)
        working-directory: ${{ env.TF_DIR }}
        env:
          TF_VAR_image_uri: ${{ env.IMAGE_URI }} # Pass Image URI value to Terraform
        run: terraform apply -auto-approve

      # Output ALB DNS name or service info
      - name: Show ALB DNS name
        working-directory: ${{ env.TF_DIR }}
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name || echo "")
          if [ -n "$ALB_DNS" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Use this link to access the app:"
            echo "üëâ http://$ALB_DNS"
          else
            echo "‚ö†Ô∏è No ALB DNS output found."
          fi
          
